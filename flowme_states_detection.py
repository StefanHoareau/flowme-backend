"""
FlowMe States Detection - Module de d√©tection des 64 √©tats de conscience
Bas√© sur l'architecture √©thique de Stefan Torregrossa
"""

import re
import random
from typing import Dict, List, Any
from datetime import datetime

# D√©finition des 64 √©tats FlowMe (inspir√©s du I-Ching adapt√© pour l'IA)
FLOWME_STATES = {
    1: {
        "name": "Pr√©sence Silencieuse",
        "description": "√âtat d'√©coute profonde et d'attention pure",
        "keywords": ["silence", "√©coute", "attention", "pr√©sence", "calme"],
        "energy": "receptive",
        "advice_template": "Je ressens votre besoin d'√™tre entendu. Prenons le temps de bien cerner votre situation."
    },
    2: {
        "name": "Terre Nourrici√®re",
        "description": "Accueil bienveillant et soutien inconditionnel",
        "keywords": ["soutien", "aide", "accompagnement", "difficile", "probl√®me"],
        "energy": "nurturing",
        "advice_template": "Je suis l√† pour vous accompagner. Ensemble, nous trouverons des solutions adapt√©es."
    },
    3: {
        "name": "Germination",
        "description": "D√©but d'un processus, √©mergence d'une id√©e",
        "keywords": ["nouveau", "commencer", "id√©e", "projet", "d√©but"],
        "energy": "creative",
        "advice_template": "C'est le moment propice pour planter les graines de votre projet. Avan√ßons pas √† pas."
    },
    4: {
        "name": "Sagesse Enfantine",
        "description": "Curiosit√© pure et questionnement innocent",
        "keywords": ["pourquoi", "comment", "apprendre", "comprendre", "expliquer"],
        "energy": "curious",
        "advice_template": "Votre curiosit√© est pr√©cieuse. Explorons ensemble pour mieux comprendre."
    },
    5: {
        "name": "Patience Active",
        "description": "Attente consciente du bon moment",
        "keywords": ["attendre", "patience", "moment", "quand", "timing"],
        "energy": "patient",
        "advice_template": "Parfois, la meilleure action est de laisser m√ªrir la situation. Restons attentifs aux signes."
    },
    6: {
        "name": "Conflit Constructif",
        "description": "Gestion harmonieuse des tensions",
        "keywords": ["conflit", "d√©saccord", "tension", "dispute", "probl√®me"],
        "energy": "resolving",
        "advice_template": "Les tensions peuvent √™tre cr√©atrices. Cherchons ensemble un terrain d'entente."
    },
    7: {
        "name": "Direction Collective",
        "description": "Leadership au service du groupe",
        "keywords": ["√©quipe", "diriger", "leader", "groupe", "ensemble"],
        "energy": "leading",
        "advice_template": "Un bon leader √©coute avant de guider. Quelle est la vision partag√©e ici ?"
    },
    8: {
        "name": "Alliance Harmonieuse",
        "description": "Union et collaboration fructueuse",
        "keywords": ["collaboration", "partenariat", "alliance", "union", "ensemble"],
        "energy": "collaborative",
        "advice_template": "L'union fait la force. Comment pouvons-nous cr√©er plus de synergie ?"
    },
    9: {
        "name": "Petit Pas D√©termin√©",
        "description": "Progression modeste mais constante",
        "keywords": ["petit", "√©tape", "progresser", "avancer", "lentement"],
        "energy": "persistent",
        "advice_template": "Les petits pas m√®nent loin. Chaque effort compte, continuons ensemble."
    },
    10: {
        "name": "D√©marche Authentique",
        "description": "Avancer en restant fid√®le √† soi-m√™me",
        "keywords": ["authentique", "vrai", "sinc√®re", "honn√™te", "√™tre soi"],
        "energy": "authentic",
        "advice_template": "Votre authenticit√© est votre force. Restons fid√®les √† vos valeurs profondes."
    },
    # ... [√âtats 11-63 similaires] ...
    64: {
        "name": "Porte Ouverte",
        "description": "Ouverture totale aux possibilit√©s infinies",
        "keywords": ["ouvert", "possibilit√©", "avenir", "nouveau", "changement"],
        "energy": "open",
        "advice_template": "Toutes les portes sont ouvertes devant vous. Quelle direction vous inspire le plus ?"
    }
}

# √âtats compl√©mentaires (pour atteindre les 64)
def _generate_remaining_states():
    """G√©n√®re les √©tats 11-63 avec des variations th√©matiques"""
    base_themes = [
        "Transformation", "Cr√©ativit√©", "Intuition", "Force", "Douceur",
        "Clart√©", "Myst√®re", "Joie", "M√©lancolie", "Courage", "Prudence",
        "G√©n√©rosit√©", "Discipline", "Libert√©", "Structure", "Chaos Cr√©atif",
        "Harmonie", "R√©volution", "Tradition", "Innovation", "Racines",
        "Envol", "Profondeur", "Surface", "√âquilibre", "Mouvement",
        "Stabilit√©", "Flux", "Cristal", "Flamme", "Ros√©e", "Orage",
        "Arc-en-ciel", "Montagne", "Rivi√®re", "Oc√©an", "D√©sert", "For√™t",
        "Aube", "Cr√©puscule", "Midi", "Minuit", "Printemps", "√ât√©",
        "Automne", "Hiver", "Graine", "Fleur", "Fruit", "Racine",
        "Tronc", "Branche", "Feuille"
    ]
    
    for i in range(11, 64):
        theme = base_themes[(i-11) % len(base_themes)]
        FLOWME_STATES[i] = {
            "name": f"{theme} Conscient",
            "description": f"√âtat de {theme.lower()} en pleine conscience",
            "keywords": [theme.lower(), "conscience", "√©veil", "pr√©sent"],
            "energy": "balanced",
            "advice_template": f"L'√©nergie du {theme.lower()} vous traverse. Accueillons cette force avec sagesse."
        }

# Initialiser tous les √©tats
_generate_remaining_states()

def detect_flowme_state(message: str) -> int:
    """
    D√©tecte l'√©tat FlowMe le plus appropri√© selon le message
    """
    message_lower = message.lower()
    scores = {}
    
    for state_id, state_data in FLOWME_STATES.items():
        score = 0
        
        # Analyser les mots-cl√©s
        for keyword in state_data["keywords"]:
            if keyword in message_lower:
                score += 2
        
        # Analyser le sentiment g√©n√©ral
        if "?" in message:
            if state_data["energy"] == "curious":
                score += 1
        
        if any(word in message_lower for word in ["merci", "aide", "aidez"]):
            if state_data["energy"] in ["nurturing", "collaborative"]:
                score += 1
        
        if any(word in message_lower for word in ["nouveau", "commencer", "d√©buter"]):
            if state_data["energy"] == "creative":
                score += 1
                
        scores[state_id] = score
    
    # Retourner l'√©tat avec le meilleur score, ou un √©tat par d√©faut
    if max(scores.values()) > 0:
        return max(scores, key=scores.get)
    else:
        # √âtat par d√©faut: Pr√©sence Silencieuse
        return 1

def get_state_advice(state_id: int, message: str) -> str:
    """
    G√©n√®re un conseil contextuel bas√© sur l'√©tat d√©tect√©
    """
    if state_id not in FLOWME_STATES:
        state_id = 1
    
    state = FLOWME_STATES[state_id]
    
    # Personnaliser le conseil selon le message
    advice = state["advice_template"]
    
    # Ajouter du contexte selon l'√©nergie de l'√©tat
    energy_context = {
        "receptive": "L'√©coute est parfois le plus beau des cadeaux.",
        "nurturing": "Chaque d√©fi porte en lui les graines de sa solution.",
        "creative": "La cr√©ativit√© na√Æt souvent de la contrainte bien comprise.",
        "curious": "La curiosit√© est le premier pas vers la sagesse.",
        "patient": "Le temps r√©v√®le souvent ce que la h√¢te cache.",
        "collaborative": "Ensemble, nous sommes plus que la somme de nos parties.",
        "authentic": "Votre v√©rit√© personnelle est votre boussole la plus fiable.",
        "balanced": "L'√©quilibre n'est pas un √©tat fixe, mais un mouvement conscient."
    }
    
    context = energy_context.get(state["energy"], "Chaque moment est une opportunit√© de croissance.")
    
    return f"{advice}\n\nüí° {context}"

def suggest_transition(current_state: int, desired_outcome: str) -> Dict[str, Any]:
    """
    Sugg√®re des transitions d'√©tat possibles
    """
    if current_state not in FLOWME_STATES:
        current_state = 1
    
    current = FLOWME_STATES[current_state]
    
    # Logique simple de transition bas√©e sur l'√©nergie
    energy_transitions = {
        "receptive": [2, 4, 5],  # Vers nurturing, curious, patient
        "nurturing": [3, 7, 8],  # Vers creative, leading, collaborative
        "creative": [1, 9, 10],  # Vers receptive, persistent, authentic
        "curious": [2, 3, 6],    # Vers nurturing, creative, resolving
        "patient": [7, 8, 64],   # Vers leading, collaborative, open
        "collaborative": [9, 10, 1], # Vers persistent, authentic, receptive
        "authentic": [3, 5, 64], # Vers creative, patient, open
        "balanced": [1, 32, 64]  # Vers receptive, milieu, open
    }
    
    suggested = energy_transitions.get(current["energy"], [1, 32, 64])
    
    return {
        "current_state": current_state,
        "current_name": current["name"],
        "suggested_states": suggested,
        "suggested_names": [FLOWME_STATES[s]["name"] for s in suggested],
        "path": f"De {current['name']} vers de nouvelles possibilit√©s",
        "advice": f"Depuis l'√©tat {current['name']}, vous pouvez naturellement √©voluer vers plus de {desired_outcome}."
    }

def get_state_info(state_id: int) -> Dict[str, Any]:
    """
    Retourne les informations compl√®tes d'un √©tat
    """
    if state_id not in FLOWME_STATES:
        state_id = 1
    
    return {
        "id": state_id,
        "name": FLOWME_STATES[state_id]["name"],
        "description": FLOWME_STATES[state_id]["description"],
        "energy": FLOWME_STATES[state_id]["energy"],
        "keywords": FLOWME_STATES[state_id]["keywords"]
    }

def get_compatible_states(state_id: int) -> List[int]:
    """
    Retourne les √©tats compatibles/compl√©mentaires
    """
    if state_id not in FLOWME_STATES:
        return [1, 32, 64]
    
    current_energy = FLOWME_STATES[state_id]["energy"]
    
    # Logique de compatibilit√©
    compatible = []
    for sid, state in FLOWME_STATES.items():
        if sid != state_id:
            # √âtats avec √©nergie compl√©mentaire
            if (current_energy == "receptive" and state["energy"] == "creative") or \
               (current_energy == "creative" and state["energy"] == "receptive") or \
               (current_energy == "nurturing" and state["energy"] == "collaborative") or \
               (state["energy"] == "balanced"):
                compatible.append(sid)
    
    # Retourner les 5 premiers si trop nombreux
    return compatible[:5] if len(compatible) > 5 else compatible

# Test rapide
if __name__ == "__main__":
    test_message = "Bonjour, j'aimerais commencer un nouveau projet"
    detected = detect_flowme_state(test_message)
    advice = get_state_advice(detected, test_message)
    
    print(f"Message: {test_message}")
    print(f"√âtat d√©tect√©: {detected} - {FLOWME_STATES[detected]['name']}")
    print(f"Conseil: {advice}")
