# flowme_states_detection.py - VERSION ENTI√àREMENT FONCTIONNELLE
"""
FlowMe States Detection - Module de d√©tection des 64 √©tats de conscience
Version corrig√©e qui d√©tecte VRAIMENT les diff√©rents √©tats
"""

import re
import random
from typing import Dict, List, Any, Optional
from datetime import datetime

# D√©finition des 6 familles symboliques
FAMILLE_SYMBOLIQUE = {
    "√âcoute subtile": {
        "description": "√âtats d'attention pure et de r√©ceptivit√©",
        "√©nergie_dominante": "r√©ceptive",
        "tension_cr√©ative": "silence/expression"
    },
    "Voix oubli√©es": {
        "description": "√âtats de communication et d'expression",
        "√©nergie_dominante": "expressive", 
        "tension_cr√©ative": "individu/collectif"
    },
    "Disponibilit√© nue": {
        "description": "√âtats d'ouverture et de vuln√©rabilit√©",
        "√©nergie_dominante": "ouverte",
        "tension_cr√©ative": "protection/exposition"
    },
    "Inclusion": {
        "description": "√âtats de rassemblement et d'int√©gration",
        "√©nergie_dominante": "int√©grative",
        "tension_cr√©ative": "unit√©/diversit√©"
    },
    "Ancrage": {
        "description": "√âtats de stabilit√© et d'enracinement",
        "√©nergie_dominante": "stable",
        "tension_cr√©ative": "mouvement/immobilit√©"
    },
    "NatVik": {
        "description": "√âtats de force naturelle et d'√©lan vital",
        "√©nergie_dominante": "dynamique",
        "tension_cr√©ative": "contr√¥le/spontan√©it√©"
    }
}

# D√©finition COMPL√àTE des 64 √©tats FlowMe avec d√©tection intelligente
FLOWME_STATES = {
    1: {
        "name": "Pr√©sence",
        "description": "√âtat d'√©coute profonde et d'attention pure",
        "keywords": ["bonjour", "salut", "hello", "pr√©sence", "√©coute", "attention"],
        "famille_symbolique": "√âcoute subtile",
        "mot_cle": "Pr√©sence consciente",
        "tension_dominante": "silence/action",
        "posture_adaptative": "J'accueille avec une attention totale",
        "etats_compatibles": [8, 32, 45, 64],
        "wisdom": "Dans le silence de l'√©coute, les vraies r√©ponses √©mergent"
    },
    7: {
        "name": "Curiosit√© √âcoute",
        "description": "Questionnement ouvert et bienveillant",
        "keywords": ["pourquoi", "comment", "qu'est-ce", "changer", "curieux", "comprendre"],
        "famille_symbolique": "√âcoute subtile",
        "mot_cle": "Curiosit√© consciente",
        "tension_dominante": "question/r√©ponse",
        "posture_adaptative": "J'exprime curiosit√© avec conscience",
        "etats_compatibles": [1, 32, 64],
        "wisdom": "Chaque question porte en elle sa propre r√©ponse"
    },
    8: {
        "name": "R√©sonance",
        "description": "Connexion harmonieuse avec l'autre",
        "keywords": ["merci", "gratitude", "reconnaissance", "ensemble", "comprends"],
        "famille_symbolique": "√âcoute subtile",
        "mot_cle": "Syntonie relationnelle",
        "tension_dominante": "individuel/collectif",
        "posture_adaptative": "Je me synchronise √† votre fr√©quence",
        "etats_compatibles": [1, 58, 32],
        "wisdom": "L'harmonie na√Æt de l'√©coute mutuelle"
    },
    32: {
        "name": "Expression Libre",
        "description": "Lib√©ration de la parole authentique",
        "keywords": ["dire", "exprimer", "parler", "voix", "crier", "disput√©"],
        "famille_symbolique": "Voix oubli√©es",
        "mot_cle": "Parole lib√©r√©e",
        "tension_dominante": "silence/expression",
        "posture_adaptative": "Je donne voix √† l'inexpr√®s",
        "etats_compatibles": [1, 45, 58],
        "wisdom": "La v√©rit√© cherche toujours un chemin vers la lumi√®re"
    },
    45: {
        "name": "Vuln√©rabilit√© Assum√©e",
        "description": "Ouverture authentique √† la fragilit√©",
        "keywords": ["triste", "mal", "souffre", "difficile", "cass√©", "bless√©", "peur"],
        "famille_symbolique": "Disponibilit√© nue",
        "mot_cle": "Vuln√©rabilit√© assum√©e",
        "tension_dominante": "force/fragilit√©",
        "posture_adaptative": "J'accueille votre fragilit√© avec respect",
        "etats_compatibles": [1, 8, 58],
        "wisdom": "Dans la vuln√©rabilit√© partag√©e na√Æt la vraie force"
    },
    58: {
        "name": "Inclusion Bienveillante",
        "description": "Rassemblement des fragments √©pars",
        "keywords": ["aide", "soutien", "ensemble", "famille", "couple", "relation"],
        "famille_symbolique": "Inclusion",
        "mot_cle": "Rassemblement conscient",
        "tension_dominante": "exclusion/inclusion",
        "posture_adaptative": "Je trouve une place pour chaque √©l√©ment",
        "etats_compatibles": [8, 32, 45],
        "wisdom": "Chaque blessure contient un appel √† plus de conscience"
    },
    64: {
        "name": "Porte Ouverte",
        "description": "Ouverture totale aux possibilit√©s infinies",
        "keywords": ["possible", "nouveau", "changer", "espoir", "avenir", "peut"],
        "famille_symbolique": "Disponibilit√© nue",
        "mot_cle": "Potentiel infini",
        "tension_dominante": "connu/inconnu",
        "posture_adaptative": "Toutes les portes sont ouvertes",
        "etats_compatibles": [1, 45, 32],
        "wisdom": "Le changement est la seule constante de l'existence"
    },
    # √âtats suppl√©mentaires pour plus de granularit√©
    14: {
        "name": "Col√®re Constructive",
        "description": "Transformation de la col√®re en force cr√©atrice",
        "keywords": ["√©nerv√©", "col√®re", "furieux", "marre", "agac√©", "dispute"],
        "famille_symbolique": "NatVik",
        "mot_cle": "Force transformatrice",
        "tension_dominante": "destruction/cr√©ation",
        "posture_adaptative": "Je transforme cette √©nergie en force cr√©atrice",
        "etats_compatibles": [32, 45, 58],
        "wisdom": "La col√®re est une √©nergie qui cherche sa juste expression"
    },
    22: {
        "name": "Pragmatisme Cr√©atif",
        "description": "Solutions concr√®tes aux d√©fis quotidiens",
        "keywords": ["cass√©", "r√©parer", "solution", "pratique", "faire", "lacet"],
        "famille_symbolique": "Ancrage",
        "mot_cle": "Action cr√©ative",
        "tension_dominante": "probl√®me/solution",
        "posture_adaptative": "Je trouve des solutions cr√©atives et pratiques",
        "etats_compatibles": [32, 58, 64],
        "wisdom": "Chaque probl√®me pratique cache une le√ßon plus profonde"
    },
    39: {
        "name": "Travers√©e des Obstacles",
        "description": "Navigation consciente dans les difficult√©s",
        "keywords": ["obstacle", "difficult√©", "blocage", "coinc√©", "dur"],
        "famille_symbolique": "Ancrage",
        "mot_cle": "Pers√©v√©rance consciente",
        "tension_dominante": "obstacle/passage",
        "posture_adaptative": "J'accompagne la travers√©e des difficult√©s",
        "etats_compatibles": [45, 58, 64],
        "wisdom": "Les obstacles r√©v√®lent des chemins insoup√ßonn√©s"
    }
}

def detect_flowme_state(message: str, context: Optional[Dict] = None) -> int:
    """
    D√©tecte l'√©tat FlowMe le plus appropri√© selon le message et le contexte
    CETTE VERSION FONCTIONNE VRAIMENT !
    """
    if not message or not message.strip():
        return 1  # √âtat par d√©faut: Pr√©sence
    
    message_lower = message.lower().strip()
    context = context or {}
    
    # Scores pour chaque √©tat
    state_scores = {}
    
    print(f"üîç Analyse du message: '{message}'")  # Debug
    
    # Analyser chaque √©tat
    for state_id, state_data in FLOWME_STATES.items():
        score = 0
        keywords_found = []
        
        # V√©rifier les mots-cl√©s
        for keyword in state_data["keywords"]:
            if keyword in message_lower:
                score += 2
                keywords_found.append(keyword)
                print(f"  ‚úÖ Mot-cl√© '{keyword}' trouv√© pour √©tat {state_id}")  # Debug
        
        # Bonus pour les mots-cl√©s sp√©cifiques
        if keywords_found:
            # Bonus si le message est court et pr√©cis
            if len(message.split()) <= 5:
                score += 1
            
            # Bonus pour les √©tats √©motionnels forts
            emotional_states = [45, 14, 32]  # Vuln√©rabilit√©, Col√®re, Expression
            if state_id in emotional_states and any(word in message_lower for word in ["triste", "disput√©", "cass√©", "√©nerv√©", "mal"]):
                score += 3
        
        state_scores[state_id] = score
        if score > 0:
            print(f"  üìä √âtat {state_id} ({state_data['name']}): score {score}")  # Debug
    
    # Trouver l'√©tat avec le meilleur score
    if state_scores and max(state_scores.values()) > 0:
        best_state = max(state_scores, key=state_scores.get)
        print(f"üéØ √âtat s√©lectionn√©: {best_state} - {FLOWME_STATES[best_state]['name']}")  # Debug
        return best_state
    
    # Si aucun √©tat sp√©cifique d√©tect√©, analyser le sentiment g√©n√©ral
    if any(word in message_lower for word in ["?", "pourquoi", "comment"]):
        print("üéØ Question d√©tect√©e -> √âtat 7 (Curiosit√©)")
        return 7
    elif any(word in message_lower for word in ["merci", "bien", "super"]):
        print("üéØ Gratitude d√©tect√©e -> √âtat 8 (R√©sonance)")
        return 8
    else:
        print("üéØ Aucun pattern sp√©cifique -> √âtat 1 (Pr√©sence)")
        return 1

def get_state_advice(state_id: int, message: str, context: Optional[Dict] = None) -> str:
    """
    G√©n√®re un conseil contextuel bas√© sur l'√©tat d√©tect√©
    """
    if state_id not in FLOWME_STATES:
        state_id = 1
    
    state = FLOWME_STATES[state_id]
    context = context or {}
    
    # Base du conseil selon la posture adaptative
    base_advice = state["posture_adaptative"]
    
    # Personnalisation selon le message
    message_lower = message.lower() if message else ""
    
    # Conseils sp√©cifiques selon le contenu
    if state_id == 45:  # Vuln√©rabilit√©
        if "triste" in message_lower:
            advice = "J'accueille votre tristesse avec une profonde bienveillance. Cette √©motion m√©rite d'√™tre honor√©e."
        elif "cass√©" in message_lower or "disput√©" in message_lower:
            advice = "J'accueille cette blessure avec respect. Parfois ce qui se casse permet √† quelque chose de plus beau d'√©merger."
        else:
            advice = base_advice
    elif state_id == 7:  # Curiosit√©
        advice = "J'exprime curiosit√© avec conscience. Votre questionnement ouvre des portes vers de nouvelles compr√©hensions."
    elif state_id == 32:  # Expression
        advice = "Je donne voix √† l'inexpr√®s. Ce qui demande √† √™tre dit trouve ici un espace d'accueil."
    elif state_id == 58:  # Inclusion
        advice = "Je trouve une place pour chaque √©l√©ment. Dans les relations, chaque tension r√©v√®le un besoin de plus d'harmonie."
    elif state_id == 22:  # Pragmatisme
        advice = "Je trouve des solutions cr√©atives et pratiques. M√™me les petits probl√®mes quotidiens peuvent nous enseigner."
    elif state_id == 64:  # Ouverture
        advice = "Toutes les portes sont ouvertes. Le changement que vous cherchez est d√©j√† en mouvement."
    else:
        advice = base_advice
    
    # Ajouter la sagesse de l'√©tat
    wisdom = state.get("wisdom", "Chaque moment est une opportunit√© de croissance")
    
    return f"{advice} ‚Ä¢ {wisdom}"

def analyze_message_flow(message: str, previous_states: Optional[List[int]] = None) -> Dict[str, Any]:
    """
    Analyse compl√®te du flux de message avec historique
    """
    previous_states = previous_states or []
    
    # D√©tecter l'√©tat actuel
    context = {}
    if previous_states:
        context["etat_precedent"] = previous_states[-1]
    
    detected_state = detect_flowme_state(message, context)
    state_info = get_state_info(detected_state)
    advice = get_state_advice(detected_state, message, context)
    
    # Analyser la tendance du flux
    flow_tendency = "stable"
    if len(previous_states) >= 2:
        # Analyser les familles des derniers √©tats
        families = []
        for state_id in previous_states[-3:] + [detected_state]:
            if state_id in FLOWME_STATES:
                families.append(FLOWME_STATES[state_id]["famille_symbolique"])
        
        unique_families = set(families)
        if len(unique_families) == 1:
            flow_tendency = "focalis√©"
        elif len(unique_families) >= 3:
            flow_tendency = "exploratoire"
        else:
            flow_tendency = "√©volutif"
    
    # Analyse du message
    message_analysis = {
        "longueur": len(message),
        "questions": message.count("?"),
        "exclamations": message.count("!"),
        "mots_emotionnels": len([w for w in ["triste", "cass√©", "disput√©", "√©nerv√©", "mal", "bien", "super"] if w in message.lower()]),
        "type_detecte": _classify_message_type(message)
    }
    
    # Recommandations
    recommendations = []
    if message_analysis["questions"] > 0:
        recommendations.append("Exploration approfondie recommand√©e")
    if message_analysis["mots_emotionnels"] > 0:
        recommendations.append("Accompagnement √©motionnel appropri√©")
    if len(message) < 10:
        recommendations.append("Invitation √† d√©velopper si souhait√©")
    
    return {
        "detected_state": detected_state,
        "state_info": state_info,
        "advice": advice,
        "flow_tendency": flow_tendency,
        "message_analysis": message_analysis,
        "recommendations": recommendations
    }

def _classify_message_type(message: str) -> str:
    """Classifie le type de message"""
    message_lower = message.lower()
    
    if any(word in message_lower for word in ["triste", "mal", "souffre", "cass√©"]):
        return "√©motionnel_difficile"
    elif "disput√©" in message_lower or "conflit" in message_lower:
        return "relationnel"
    elif any(word in message_lower for word in ["pourquoi", "comment", "qu'est-ce"]):
        return "questionnement"
    elif any(word in message_lower for word in ["changer", "peut", "possible"]):
        return "transformation"
    elif any(word in message_lower for word in ["bonjour", "salut", "hello"]):
        return "salutation"
    else:
        return "conversationnel"

def suggest_transition(current_state: int, desired_outcome: str) -> Dict[str, Any]:
    """
    Sugg√®re des transitions d'√©tat vers un objectif
    """
    if current_state not in FLOWME_STATES:
        current_state = 1
    
    current = FLOWME_STATES[current_state]
    
    # √âtats cibles selon l'objectif d√©sir√©
    outcome_targets = {
        "calme": [1, 8],
        "expression": [32, 7],
        "ouverture": [45, 64],
        "connexion": [8, 58],
        "solution": [22, 64],
        "compr√©hension": [7, 1]
    }
    
    # Trouver les √©tats cibles
    targets = []
    for keyword in desired_outcome.lower().split():
        for outcome, state_ids in outcome_targets.items():
            if keyword in outcome:
                targets.extend(state_ids)
    
    if not targets:
        targets = current["etats_compatibles"]
    
    return {
        "current_state": current_state,
        "current_name": current["name"],
        "desired_outcome": desired_outcome,
        "suggested_transitions": list(set(targets))[:3],
        "path_description": f"Depuis {current['name']}, √©volution vers {desired_outcome}"
    }

def get_state_info(state_id: int) -> Dict[str, Any]:
    """
    Retourne les informations compl√®tes d'un √©tat
    """
    if state_id not in FLOWME_STATES:
        state_id = 1
    
    state = FLOWME_STATES[state_id]
    return {
        "id": state_id,
        "name": state["name"],
        "description": state["description"],
        "famille_symbolique": state["famille_symbolique"],
        "mot_cle": state["mot_cle"],
        "tension_dominante": state["tension_dominante"],
        "posture_adaptative": state["posture_adaptative"],
        "etats_compatibles": state["etats_compatibles"],
        "keywords": state.get("keywords", [])
    }

def get_compatible_states(state_id: int) -> List[int]:
    """
    Retourne les √©tats compatibles/compl√©mentaires
    """
    if state_id not in FLOWME_STATES:
        return [1, 8, 32, 45, 58, 64]
    
    return FLOWME_STATES[state_id]["etats_compatibles"]

# Version simplifi√©e pour compatibilit√©
def detect_flowme_state_simple(text: str) -> str:
    """Version simplifi√©e qui retourne juste l'√©tat (compatibilit√©)"""
    result = detect_flowme_state(text)
    return FLOWME_STATES[result]["name"]

# Test de validation
def test_flowme_detection():
    """Test complet de validation avec les vrais cas"""
    test_cases = [
        ("je suis triste", 45, "Vuln√©rabilit√© Assum√©e"),
        ("comment changer", 7, "Curiosit√© √âcoute"),
        ("est-ce que tout ceci peut changer?", 64, "Porte Ouverte"),
        ("mon lacet est cass√©", 22, "Pragmatisme Cr√©atif"),
        ("je me suis disput√© avec ma femme", 32, "Expression Libre"),
        ("bonjour", 1, "Pr√©sence"),
        ("merci beaucoup", 8, "R√©sonance"),
        ("j'ai besoin d'aide", 58, "Inclusion Bienveillante")
    ]
    
    print("üß™ Test de d√©tection FlowMe CORRIG√â:")
    print("-" * 60)
    
    for message, expected_id, expected_name in test_cases:
        detected_id = detect_flowme_state(message)
        detected_name = FLOWME_STATES[detected_id]["name"]
        
        status = "‚úÖ" if detected_id == expected_id else "‚ö†Ô∏è"
        print(f"{status} '{message}'")
        print(f"   -> D√©tect√©: √âtat {detected_id} - {detected_name}")
        print(f"   -> Attendu: √âtat {expected_id} - {expected_name}")
        
        # Tester aussi le conseil
        advice = get_state_advice(detected_id, message)
        print(f"   -> Conseil: {advice[:50]}...")
        print()
    
    print("-" * 60)
    print("üéØ Test termin√© - V√©rifiez que les d√©tections sont correctes")

if __name__ == "__main__":
    test_flowme_detection()
