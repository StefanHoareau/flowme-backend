def detect_flowme_state_improved(message: str, context: Optional[Dict] = None) -> int:
    """
    Version am√©lior√©e de la d√©tection qui g√®re mieux les cas complexes
    """
    if not message or not message.strip():
        return 1
    
    message_lower = message.lower().strip()
    context = context or {}
    
    # === D√âTECTION PRIORITAIRE DES MOTS FORTS ===
    
    # Mots de violence/conflit (priorit√© haute)
    violence_words = ["carnage", "despotisme", "guerre", "tuer", "d√©truire", "ha√Ør", "violence"]
    if any(word in message_lower for word in violence_words):
        # Si violence + autres √©l√©ments ‚Üí Expression/Col√®re
        if any(word in message_lower for word in ["disput√©", "√©nerv√©", "marre"]):
            return 14  # Col√®re Constructive
        else:
            return 32  # Expression Libre (besoin d'exprimer des choses fortes)
    
    # Mots de souffrance (priorit√© haute)
    suffering_words = ["triste", "mal", "souffre", "douleur", "bless√©", "cass√©"]
    if any(word in message_lower for word in suffering_words):
        return 45  # Vuln√©rabilit√© Assum√©e
    
    # === D√âTECTION PAR COMBINAISONS ===
    
    # Messages contradictoires (amour + violence)
    love_words = ["amour", "compassion", "tendresse", "douceur"]
    has_love = any(word in message_lower for word in love_words)
    has_violence = any(word in message_lower for word in violence_words)
    
    if has_love and has_violence:
        return 58  # Inclusion Bienveillante (int√©gration des oppos√©s)
    
    # === D√âTECTION NORMALE PAR MOTS-CL√âS ===
    
    state_scores = {}
    
    for state_id, state_data in FLOWME_STATES.items():
        score = 0
        keywords_found = []
        
        # V√©rifier les mots-cl√©s
        for keyword in state_data["keywords"]:
            if keyword in message_lower:
                score += 2
                keywords_found.append(keyword)
        
        # Bonus contextuel
        if keywords_found:
            if len(message.split()) <= 5:
                score += 1
            
            emotional_states = [45, 14, 32]
            if state_id in emotional_states and any(word in message_lower for word in ["triste", "disput√©", "cass√©", "√©nerv√©", "mal"]):
                score += 3
        
        state_scores[state_id] = score
    
    # Trouver le meilleur √©tat
    if state_scores and max(state_scores.values()) > 0:
        best_state = max(state_scores, key=state_scores.get)
        return best_state
    
    # === FALLBACKS AM√âLIOR√âS ===
    
    # Questions
    if any(word in message_lower for word in ["?", "pourquoi", "comment", "qu'est-ce"]):
        return 7  # Curiosit√©
    
    # Gratitude pure (sans ambigu√Øt√©)
    if any(word in message_lower for word in ["merci", "gratitude", "reconnaissance"]) and not has_violence:
        return 8  # R√©sonance
    
    # Mots positifs simples (sans violence)
    if any(word in message_lower for word in ["bien", "super", "g√©nial"]) and not has_violence:
        return 8  # R√©sonance
    
    # Changement/possibilit√©
    if any(word in message_lower for word in ["changer", "possible", "peut", "nouveau"]):
        return 64  # Porte Ouverte
    
    # D√©faut s√©curis√©
    return 1  # Pr√©sence


# === MOTS-CL√âS √âTENDUS POUR CHAQUE √âTAT ===

EXTENDED_KEYWORDS = {
    14: ["√©nerv√©", "col√®re", "furieux", "marre", "agac√©", "dispute", "violence", "carnage", "guerre", "r√©voltant"],
    32: ["dire", "exprimer", "parler", "voix", "crier", "disput√©", "proclamer", "d√©clarer", "r√©v√©ler"],
    45: ["triste", "mal", "souffre", "difficile", "cass√©", "bless√©", "peur", "vuln√©rable", "fragile"],
    58: ["aide", "soutien", "ensemble", "famille", "couple", "relation", "amour", "compassion", "inclusion"],
    22: ["cass√©", "r√©parer", "solution", "pratique", "faire", "lacet", "probl√®me", "r√©soudre"],
    7: ["pourquoi", "comment", "qu'est-ce", "changer", "curieux", "comprendre", "explorer"],
    8: ["merci", "gratitude", "reconnaissance", "ensemble", "comprends", "harmonie", "bien"],
    64: ["possible", "nouveau", "changer", "espoir", "avenir", "peut", "transformation"],
    1: ["bonjour", "salut", "hello", "pr√©sence", "√©coute", "attention", "silence"]
}

def test_improved_detection():
    """Test avec le message probl√©matique"""
    
    test_cases = [
        ("Amour, Compassion, Despotisme, Carnage, cela me pla√Æt bien !", "Devrait √™tre √âtat 58 (Inclusion) ou 32 (Expression)"),
        ("je suis triste", "√âtat 45 (Vuln√©rabilit√©)"),
        ("comment changer", "√âtat 7 (Curiosit√©)"),
        ("mon lacet est cass√©", "√âtat 22 (Pragmatisme)"),
        ("merci beaucoup", "√âtat 8 (R√©sonance)"),
        ("je me suis disput√©", "√âtat 32 (Expression)")
    ]
    
    print("üß™ Test de la d√©tection am√©lior√©e:")
    print("-" * 70)
    
    for message, expected in test_cases:
        detected = detect_flowme_state_improved(message)
        state_name = FLOWME_STATES[detected]["name"]
        
        print(f"Message: '{message}'")
        print(f"D√©tect√©: √âtat {detected} - {state_name}")
        print(f"Attendu: {expected}")
        print("-" * 40)

# Test sp√©cifique pour le message probl√©matique
def analyze_problematic_message():
    """Analyse d√©taill√©e du message probl√©matique"""
    message = "Amour, Compassion, Despotisme, Carnage, cela me pla√Æt bien !"
    
    print("üîç Analyse du message probl√©matique:")
    print(f"Message: '{message}'")
    print()
    
    # D√©tection actuelle
    current_result = detect_flowme_state(message)
    print(f"‚ùå D√©tection actuelle: √âtat {current_result} - {FLOWME_STATES[current_result]['name']}")
    
    # D√©tection am√©lior√©e  
    improved_result = detect_flowme_state_improved(message)
    print(f"‚úÖ D√©tection am√©lior√©e: √âtat {improved_result} - {FLOWME_STATES[improved_result]['name']}")
    
    print()
    print("üí° Pourquoi cette am√©lioration:")
    print("- D√©tecte 'carnage' et 'despotisme' comme mots de violence")
    print("- D√©tecte 'amour' et 'compassion' comme mots d'inclusion") 
    print("- Combinaison violence + amour = besoin d'inclusion/int√©gration")
    print("- Plus de fallback aveugle sur 'bien'")
